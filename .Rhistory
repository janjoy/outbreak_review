devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo")
devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo")
devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo")
install.packages("devtools")
devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo")
knitr::opts_chunk$set(echo = TRUE)
library(outbreakinfo)
p <- plotAllLineagesByLocation(location = "United States", other_threshold = 0.03, nday_threshold = 5, ndays = 60)
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
#outbreak.info R package: Genomic data
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
#outbreak.info R package: Genomic data
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
detach("package:outbreakinfo", unload=TRUE)
library(outbreakinfo)
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
remove.packages("outbreakinfo", lib="~/R/win-library/4.1")
devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
knitr::opts_chunk$set(echo = TRUE)
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
authenticateUser()
authenticateUser()
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
#asks to call authenticateUser(), after that it takes you to the GISAID website to authenticate/register if you dont have an account.
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
#asks to call authenticateUser(), after that it takes you to the GISAID website to authenticate/register if you dont have an account.
df=getSeqCounts(location="United States")
print(head(df))
#getGlobalPrevalence
getGlobalPrevalence(pangolin_lineage, mutations=NULL, cumulative=NULL)
#getGlobalPrevalence
df=getGlobalPrevalence(pangolin_lineage = "B.1.1.7", mutations = "S:E484K")
print(head(df))
#getPrevalenceByLocation
df=getPrevalenceByLocation(pangolin_lineage = "P.1", location = "Brazil")
print(head(df))
#plotPrevalenceByLocation
p=plotPrevalenceByLocation(pangolin_lineage = "P.1", location = "Brazil")
show(p)
#getCumulativeBySubadmin
df=getCumulativeBySubadmin(pangolin_lineage="B.1.1.7", location="California")
print(head(df))
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
#outbreak.info R package: Genomic data
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
#asks to call authenticateUser(), after that it takes you to the GISAID website to authenticate/register if you dont have an account.
authenticateUser()
#add this to documentation?
df=getSeqCounts(location="United States")
print(head(df))
#getGlobalPrevalence
df=getGlobalPrevalence(pangolin_lineage = "B.1.1.7", mutations = "S:E484K")
print(head(df))
#getPrevalenceByLocation
df=getPrevalenceByLocation(pangolin_lineage = "P.1", location = "Brazil")
print(head(df))
#plotPrevalenceByLocation
p=plotPrevalenceByLocation(pangolin_lineage = "P.1", location = "Brazil")
show(p)
#getCumulativeBySubadmin
df=getCumulativeBySubadmin(pangolin_lineage="B.1.1.7", location="California")
print(head(df))
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
#outbreak.info R package: Genomic data
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
#asks to call authenticateUser(), after that it takes you to the GISAID website to authenticate/register if you dont have an account.
authenticateUser()
#add this to documentation?
df=getSeqCounts(location="United States")
print(head(df))
#getGlobalPrevalence
df=getGlobalPrevalence(pangolin_lineage = "B.1.1.7", mutations = "S:E484K")
print(head(df))
#getPrevalenceByLocation
df=getPrevalenceByLocation(pangolin_lineage = "P.1", location = "Brazil")
print(head(df))
#plotPrevalenceByLocation
p=plotPrevalenceByLocation(pangolin_lineage = "P.1", location = "Brazil")
show(p)
#getCumulativeBySubadmin
df=getCumulativeBySubadmin(pangolin_lineage="B.1.1.7", location="California")
print(head(df))
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getLag
#Description:
#Returns the daily lag between collection and submission dates by location
df=getLag(location="California")
authenticateUser()
#getLag
#Description:
#Returns the daily lag between collection and submission dates by location
df=getLag(location="California")
print(head(df))
#getMutationDetails
#Description:
#Returns details of mutation(s)
df=getMutationDetails(mutations=c("S:E484K", "S:N501Y"))
print(head(df))
#getMutationAcrossLineage
#Description:
#Returns prevalence of a mutation across lineages by location
df=getMutationAcrossLineage(mutations="S:N501Y", location="United States")
#getMutationsByLineage
df=getMutationsByLineage(pangolin_lineage="P.1", frequency=0.8)
#getAllLineagesByLocation
df=getAllLineagesByLocation(location = "India", other_threshold=0.03, nday_threshold=60, other_exclude="P.1")
#getGenomicData
df=getGenomicData(query_url="prevalence-by-location", location="United Kingdom", pangolin_lineage = "B.1.1.7")
invokeRestart("muffleWarning")
authenticateUser()
#getMutationAcrossLineage
#Description:
#Returns prevalence of a mutation across lineages by location
df=getMutationAcrossLineage(mutations="S:N501Y", location="United States")
print(head(df))
#getMutationsByLineage
df=getMutationsByLineage(pangolin_lineage="P.1", frequency=0.8)
print(head(df))
#getAllLineagesByLocation
df=getAllLineagesByLocation(location = "India", other_threshold=0.03, nday_threshold=60, other_exclude="P.1")
print(head(df))
#getGenomicData
df=getGenomicData(query_url="prevalence-by-location", location="United Kingdom", pangolin_lineage = "B.1.1.7")
print(head(df))
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
authenticateUser()
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
invokeRestart("muffleWarning")
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
authenticateUser()
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
invokeRestart("muffleWarning")
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
authenticateUser()
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
invokeRestart("muffleWarning")
authenticateUser()
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
warnings()
warnings
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
authenticateUser()
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
invokeRestart("muffleWarning")
authenticateUser()
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
invokeRestart("muffleWarning")
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#install devtools as a start, else error "Error in loadNamespace(x) : there is no package called ‘devtools’"
#install.packages("devtools")
#restart after installing devtools!
#devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
#outbreak.info R package: Genomic data
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
authenticateUser()
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
#asks to call authenticateUser(), after that it takes you to the GISAID website to authenticate/register if you dont have an account.
authenticateUser()
#getCumulativeBySubadmin
df=getCumulativeBySubadmin(pangolin_lineage="B.1.1.7", location="California")
authenticateUser()
#getCumulativeBySubadmin
df=getCumulativeBySubadmin(pangolin_lineage="B.1.1.7", location="California")
print(head(df))
#getCollectionDateByLocation
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getLag
#Description:
#Returns the daily lag between collection and submission dates by location
df=getLag(location="California")
print(head(df))
#asks for authenticateUser() -> goes to login page, put in your credentials , close page and come back.
#getMutationDetails
#Description:
#Returns details of mutation(s)
df=getMutationDetails(mutations=c("S:E484K", "S:N501Y"))
print(head(df))
#getMutationAcrossLineage
#Description:
#Returns prevalence of a mutation across lineages by location
df=getMutationAcrossLineage(mutations="S:N501Y", location="United States")
print(head(df))
#getMutationsByLineage
df=getMutationsByLineage(pangolin_lineage="P.1", frequency=0.8)
print(head(df))
#getAllLineagesByLocation
df=getAllLineagesByLocation(location = "India", other_threshold=0.03, nday_threshold=60, other_exclude="P.1")
print(head(df))
#getGenomicData
df=getGenomicData(query_url="prevalence-by-location", location="United Kingdom", pangolin_lineage = "B.1.1.7")
print(head(df))
#getGenomicData
df=getGenomicData(query_url="prevalence-by-location", location="United Kingdom", pangolin_lineage = "B.1.1.7")
print(head(df))
#getCollectionDateByLocation
authenticateUser()
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getCollectionDateByLocation
#authenticateUser()
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
knitr::opts_chunk$set(echo = TRUE)
library(outbreakinfo)
p <- plotAllLineagesByLocation(location = "United States", other_threshold = 0.03, nday_threshold = 5, ndays = 60)
p <- p + scale_fill_brewer(palette="Set1")
library(ggplot2)
p <- plotAllLineagesByLocation(location = "United States", other_threshold = 0.03, nday_threshold = 5, ndays = 60)
p <- p + scale_fill_brewer(palette="Set1")
show(p)
lineage_df <- getAllLineagesByLocation("United States")
lineage_list <- lineage_df %>%
dplyr::filter(lineage != "other") %>%
dplyr::pull(lineage) %>%
unique()
library(dplyr)
lineage_df <- getAllLineagesByLocation("United States")
lineage_list <- lineage_df %>%
dplyr::filter(lineage != "other") %>%
dplyr::pull(lineage) %>%
unique()
df_ll <- lineage_list %>%
purrr::map_dfr(~{getMutationsByLineage(.x, frequency=0) %>%
dplyr::mutate(lineage_name = .x)})
mut_df <- df_ll %>%
dplyr::filter(prevalence > 0.75) %>%
dplyr::pull(mutation) %>%
unique()
df_ll <- df_ll %>%
dplyr::filter(mutation %in% mut_df)
df_ll <- df_ll %>%
dplyr::filter(gene == "S")
p <- ggplot(df_ll, aes(mutation, lineage_name, fill = prevalence)) + geom_tile(color = "grey") + scale_fill_gradient2(labels = scales::percent, midpoint = 0.5, low = "#fff7f3", mid = "#f768a1", high = "#49006a") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) + coord_equal() + ggtitle("Characteristic S-gene mutations in common lineages in the United States")
show(p)
voc <- c("B.1.1.7", "B.1.617.2", "P.1", "B.1.351")
voc_df = NULL
for (i in voc){
df <- getPrevalenceByLocation(i, "United States", cumulative=T)
df <- cbind(lineage = i, df)
voc_df = rbind(voc_df, df)
}
knitr::kable(voc_df)
#devtools::install_github("outbreak-info/R-outbreak-info/outbreakinfo", ref="auth")
library(outbreakinfo)
#outbreak.info R package: Genomic data
getSeqCounts(location=NULL, cumulative=NULL, subadmin=NULL)
#asks to call authenticateUser(), after that it takes you to the GISAID website to authenticate/register if you dont have an account.
authenticateUser()
#add this to documentation?
df=getSeqCounts(location="United States")
print(head(df))
#getGlobalPrevalence
df=getGlobalPrevalence(pangolin_lineage = "B.1.1.7", mutations = "S:E484K")
print(head(df))
#getPrevalenceByLocation
df=getPrevalenceByLocation(pangolin_lineage = "P.1", location = "Brazil")
print(head(df))
#plotPrevalenceByLocation
p=plotPrevalenceByLocation(pangolin_lineage = "P.1", location = "Brazil")
show(p)
#getCumulativeBySubadmin
df=getCumulativeBySubadmin(pangolin_lineage="B.1.1.7", location="California")
print(head(df))
#getCollectionDateByLocation
#authenticateUser()
df=getCollectionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getSubmissionDateByLocation
df=getSubmissionDateByLocation(pangolin_lineage="B.1.1.7", location="California")
#getLag
#Description:
#Returns the daily lag between collection and submission dates by location
df=getLag(location="California")
print(head(df))
#asks for authenticateUser() -> goes to login page, put in your credentials , close page and come back.
#getMutationDetails
#Description:
#Returns details of mutation(s)
df=getMutationDetails(mutations=c("S:E484K", "S:N501Y"))
print(head(df))
#getMutationAcrossLineage
#Description:
#Returns prevalence of a mutation across lineages by location
df=getMutationAcrossLineage(mutations="S:N501Y", location="United States")
print(head(df))
#getMutationsByLineage
df=getMutationsByLineage(pangolin_lineage="P.1", frequency=0.8)
print(head(df))
#getAllLineagesByLocation
df=getAllLineagesByLocation(location = "India", other_threshold=0.03, nday_threshold=60, other_exclude="P.1")
print(head(df))
#getGenomicData
df=getGenomicData(query_url="prevalence-by-location", location="United Kingdom", pangolin_lineage = "B.1.1.7")
print(head(df))
